{"version":3,"sources":["res/images/dapper.jpg","registerServiceWorker.js","components/title-bar/title-bar.js","components/code/code.js","components/code/java.js","components/pages/home/title.js","components/pages/home/home.js","components/code/groovy.js","components/code/tdd-group.js","components/pages/blog/blog.js","components/pages/about/about.js","components/pages/projects/projects.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","TitleBar","react_default","a","createElement","id","NavLink","exact","to","activeClassName","Component","Code","className","concat","this","props","styleName","language","code","Java","Prism","highlightAll","code_code","Title","testCode","titleCode","test","implCode","impl","java","Home","home_title","src","dapper","alt","Groovy","TddGroup","Blog","href","groovy","buildGradle","tdd_group","code1","code2","code3","impl1","impl2","About","Projects","App","title_bar_title_bar","Switch","Route","path","component","ReactDOM","render","BrowserRouter","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4a160b65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dapper.69844fe4.jpg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React, {Component} from 'react';\nimport {NavLink} from 'react-router-dom'\nimport './title-bar.scss';\n\n\nclass TitleBar extends Component {\n    render() {\n        return (\n            <div id='title-bar'>\n                <ul>\n                    <li><NavLink exact to=\"/\" activeClassName=\"active\">Home</NavLink></li>\n                    <li><NavLink to=\"/blog\" activeClassName=\"active\">Blog</NavLink></li>\n                    <li><NavLink to=\"/project\" activeClassName=\"active\">Projects</NavLink></li>\n                    <li><NavLink to=\"/about\" activeClassName=\"active\">About Me</NavLink></li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default TitleBar;\n","import React, {Component} from 'react';\nimport './code.scss';\n\nclass Code extends Component {\n    render() {\n\n        return (\n            <div className={`${ this.props.styleName }`}>\n                <div className=\"terminal\">\n                    <ul className=\"terminal-dots\">\n                        <li/>\n                        <li/>\n                        <li/>\n                    </ul>\n                    <pre>\n                        <code className={`language-${this.props.language}`}>{this.props.code}</code>\n                    </pre>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Code;\n","import React, {Component} from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-java';\nimport './custom-prism-theme/darcula.css';\nimport Code from \"./code\";\n\nclass Java extends Component {\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n    render() {\n        return (\n            <Code language='java' styleName={this.props.styleName} code={this.props.code}/>\n        )\n    }\n}\n\nexport default Java;","import React, {Component} from 'react';\nimport Java from \"../../code/java\";\nimport titleCode from './title-code'\nimport './title.scss'\n\nclass Title extends Component {\n    render() {\n        let testCode = titleCode.test;\n        let implCode = titleCode.impl;\n\n\n        return (\n            <div className=\"container\">\n                <div className='left-pad'/>\n                <Java styleName='test' code={testCode}/>\n                <Java styleName='impl' code={implCode}/>\n                <div className='right-pad'/>\n            </div>\n        )\n    }\n}\n\nexport default Title;\n","import React, {Component} from \"react\";\nimport Title from \"./title\";\nimport dapper from \"../../../res/images/dapper.jpg\"\n\nimport \"./home.scss\"\n\nclass Home extends Component {\n    render() {\n        return (\n            <div className=\"home\">\n                <Title/>\n                <div className=\"photo-container\">\n                    <img className=\"photo\" src={dapper} alt=\"dapper-icon\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-groovy';\nimport Code from \"./code\";\n\n\nclass Groovy extends Component {\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n    render() {\n        return (\n            <Code language='groovy' styleName={this.props.styleName} code={this.props.code}/>\n\n        )\n    }\n}\n\nexport default Groovy;","import React, {Component} from 'react';\n\nclass TddGroup extends Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className='left-pad'/>\n                {this.props.test}\n                {this.props.impl}\n                <div className='right-pad'/>\n            </div>\n        );\n    }\n}\n\nexport default TddGroup;\n","import React, {Component} from 'react';\nimport Groovy from \"../../code/groovy\";\nimport TddGroup from \"../../code/tdd-group\";\n\nimport buildGradle from \"./20181010/build-gradle\"\nimport code1 from \"./20181010/code-1\"\nimport code2 from \"./20181010/code-2\"\nimport code3 from \"./20181010/code-3\"\nimport Java from \"../../code/java\";\n\nimport \"./blog.scss\"\n\nclass Blog extends Component {\n    render() {\n        return (\n            <div className=\"posts\">\n                <h3>20181010</h3>\n                <h2>Setting Up Custom Trace/Spans with Spring Boot and Spring Cloud Sleuth</h2>\n                <div>\n                    <h3>Overview:</h3>\n                    <p>\n                        You have got your Spring Boot app up and running and now you want to add some metrics...great!\n                        That's the right thing to do. At the end of the day metrics will help you understand how your\n                        application is actually being used. Often times developers and product managers have a general\n                        idea of what they want to put in front of customers, but they often end up focusing on the wrong\n                        things or overlooking key things the user is showing through their behavior due to pre-disposed\n                        biases on \"Knowing what the customer wants\". Metrics are the tool that will separate the signal\n                        from the noise and let you make decisions on behaviors that drive usage of a feature vs the\n                        chaos of whackamole feature development that invariably ends up in selling vaporware to keep\n                        your stakeholders feeling like progress is just around the corner. Additionally we've all been\n                        part of those emotionally charged debates in your Retros and Techtros. By having higher sources\n                        of truth you can start basing decisions on facts and not chase moving targets.\n                    </p>\n                    <p>\n                        There is a certain level of testing, analysis, and iteration we need in order to valdiate our\n                        approach. Just like in the field of data-science, you can measure anything and make metrics tell\n                        you an answer, it just may not be to the right question. Making sure you are asking the right\n                        question is a conversation in itself....I digress. A conversation for another day.\n                    </p>\n                    <p>\n                        Let's show how we get metrics up on your Spring app so we can start answering our own questions.\n                    </p>\n                </div>\n                <div>\n                    <h3>Getting the Tools</h3>\n                    <p>\n                        We'll create a Spring Boot app using the Spring Boot CLI. You can alternatively navigate to <a\n                        href=\"https://start.spring.io\">start.spring.io</a> which will generate a zip for you that we\n                        can work from.\n                    </p>\n                    <p>\n                        I am a big fan of working from the terminal so I'll show you how to go that route. We'll start\n                        by\n                        installing the Spring Boot CLI\n                    </p>\n\n                    <h4>Mac:</h4>\n                    <p>\n                        Using Homebrew install with the commmand <code>brew tap pivotal/tap && brew install\n                        springboot</code>\n                    </p>\n\n                    <h4>Windows:</h4>\n                    <p>Using scoop to install run:</p>\n                    <span><code>scoop bucket add extras</code></span><br/>\n                    <span><code>scoop install springboot</code></span>\n\n                    <h4>Manual:</h4>\n                    <p>\n                        You can download the Spring CLI distribution from the <a\n                        href=\"https://repo.spring.io/release/org/springframework/boot/spring-boot-cli\">Spring software\n                        repository</a>:\n\n                        Download a Zip or tarball from the above URL using the latest RELEASE\n\n                        Cutting edge snapshot distributions are also available.\n\n                        Once downloaded, follow the INSTALL.txt instructions from the unpacked archive. In summary,\n                        there is a spring script (spring.bat for Windows) in a bin/ directory in the .zip file.\n                        Alternatively, you can use java -jar with the .jar file (the script helps you to be sure that\n                        the classpath is set correctly).\n                    </p>\n                </div>\n                <div>\n                    <h3>Creating the App</h3>\n                    <p>\n                        From your working directory run: <code> spring init --build=gradle -g=rocks.mcnichol\n                        -d=web,cloud-starter-sleuth my-app</code>\n                    </p>\n\n                    <p>\n                        This creates a folder named <code>my-app</code> which will have the skeleton of your project.\n                        Going inside that directory you will find that you have a build.gradle file which should look\n                        similar to this:\n                    </p>\n\n                    <Groovy code={buildGradle.groovy}/>\n\n                    <p>Looks great!</p>\n\n                    <p>\n                        A clean gradle file is something worth appreciating, gotta give credit where credit is due.\n                        One thing that is subtle but really important for how I like to maintain my build scripts is\n                        that they extracted the springBootVersion and springCloudVersion into variables. Often what I\n                        ultimately will do is source these from a variables file making it easy for me to keep things\n                        updated. Bravo Spring Team!\n                    </p>\n\n                    <p>\n                        I advocate for Gradle because the groovy scripting underneath opens you up to significant\n                        flexibility. The problem (and I've had this conversation with many junior devs) is that you\n                        can get away with so much that at some point your hands are tied and everything you touch seems\n                        to break something else making it appear brittle.\n                    </p>\n\n                    <p>\n                        Somewhere around this point is where I see a dev throw their hands up in despair and\n                        blame the tool which I find somewhat unfair. If anything, I'd argue the problem is that the\n                        gradle structure has so many disparate tasks that are somewhat unobvious. To the untrained\n                        developer it is all magic working in the background. Short of valid syntax, there is limited\n                        clarity on the errors or side-effects that you have created and you lay at the mercy of\n                        documentation...which every camp suffers from in one way or another. Arguably one can say this\n                        is what your IDE is for. The alternative being Maven (which many of the greats I respect\n                        immensely wave the banner for, I just can't love XML for my build tooling. It reminds me of a\n                        quote I heard: \"XML is like violence, if you aren't getting the results you want, you probably\n                        aren't using enough.\"\n                    </p>\n\n                    <p>\n                        My rule at the end of the day is if you want to deviate, you should have a high tolerance for\n                        pain. A truly admirable trait in any developer!\n                    </p>\n\n                    <p>\n                        Now we let's load up the Spring Boot application. Using the Spring Boot CLI the skeleton is\n                        there with a runnable application. I typically set my app in a side-by-side, test on the left,\n                        implementation on the right like below:\n                    </p>\n\n                    <TddGroup test={<Java code={code1.test}/>} impl={<Java code={code1.impl}/>}> </TddGroup>\n\n                    <p>\n                        In order to see the Trace and Span Id's made from Spring Cloud Sleuth, we need to hit an\n                        endpoint\n                        and fire off a log message. We can start with a few tests, then write the implementation.\n                    </p>\n\n                    <p>\n                        At this point we have the basics of spinning up a simple application with the skeleton sitting\n                        in front of our repo. From here on we'll be pretty brief with the import statements at the top\n                        of our code alongside not being repetitive with code, only showing the parts that are new. To\n                        see the complete application you can see the working <a\n                        href=\"https://github.com/mcnichol/spring-sleuth-custom-logging.git\">Custom Spring Trace App</a> in\n                        Github.\n                    </p>\n\n\n                </div>\n                <div>\n                    <h3>Test Driving the App</h3>\n\n                    <p>\n                        Because this is not about test driving a RestController, we are going to assume that this was\n                        already driven out through tests (although we will certainly test our way through that in other\n                        blogs as there are a few tools I've made to make that process a little bit cleaner alongside\n                        many of the things afforded to you by Spring). Here is the code below that should exist:\n                    </p>\n                    <TddGroup test={<Java code={code2.test}/>} impl={<Java code={code2.impl}/>}> </TddGroup>\n                </div>\n                <div>\n                    <h3>Testing our controller for a Custom trace Span</h3>\n\n                    <p>\n                        I'm going to assume you know what a trace and span, otherwise you probably wouldn't be here but\n                        for complete-ness you can read up on it at the [Spring documentation\n                        site](https://cloud.spring.io/spring-cloud-sleuth/single/spring-cloud-sleuth.html).\n                    </p>\n                    <p>\n                        TL;DR - It adds a unique ID to each Request/Response and provides some tooling to visualize this\n                        flow for traceability.\n                    </p>\n                    <p>\n                        What happens when you need to customize this. Your engineers now need to follow some pattern\n                        your organization has picked up in logging. You may need to modify the logging pattern because\n                        when it randomly shows up as all 16 digits (which it will) it flags your security scans with a\n                        false positive appearing like the PII of Credit Cards showing up in logs!!!\n                    </p>\n                    <p>\n                        Not a big deal but the simple solution can be un-obvious. Let's write a test and then I will\n                        show you two ways to implement this. The test is slightly tricky for new TDD'ers but it will\n                        highlight a key concept in the <a href=\"https://12factor.net/\">12 Factor App</a> model - <a\n                        href=\"https://12factor.net/logs\">XI Logs as Event Streams</a>.\n                    </p>\n                    <h4><code>AppControllerIntegrationTest.java</code></h4>\n                    <Java code={code3.test}/>\n                    <p>\n                        That was it?\n                    </p>\n                    <p>\n                        Yes. At the end of the day we operate with the understanding that our logs are streams of data\n                        and they should be saved off to some store where they can be later indexed, parsed, and searched\n                        in near realtime. This is typically done using platforms like Kibana, Splunk, or S3 Glacier\n                        stores. If you are using a PaaS like PCF, all of this forwarding of logs is done transparently\n                        to the AppDev whereas running your own Webserver you will be responsible for forwarding these\n                        logs on to whatever final resting place. What we have done in our test is merely shortcut the\n                        system and instead of logging out to the console, we are merely\n                        intercepting <code>System.out</code> and dumping to a ByteArrayOutputStream wrapped in a\n                        PrintStream.\n                    </p>\n                    <p>\n                        Let's throw together an even simpler implementation.\n                    </p>\n                    <h3>Solution 1:</h3>\n                    <h4><code>application.yml</code></h4>\n                    <Groovy code={code3.impl1}/>\n                    <p>\n                        As I mentioned, it's going to be so easy, it's merely a one-liner. In your application.yml file\n                        under <code>src > main > resources</code> folder you can add this. If you are familiar with\n                        configuration of logback in your Java applications, you will find this is pretty\n                        straightforward. If not, just know it's a fairly common pattern and should you want to customize\n                        your logs, you could do something relatively similar. <a\n                        href=\"https://logback.qos.ch/manual/index.html\">[Logback Docs]</a>\n                    </p>\n                    <h3>Solution 2:</h3>\n                    <p>\n                        In this approach it will be slightly more involved so I'll explain first. We are going to\n                        implement our own <code>CurrentTraceContext</code> and supply it to Spring. When Spring is\n                        injecting all of the dependencies it will be asked for an slf4jSpanLogger. Instead of supplying\n                        the default we will instead provide it our own implementation as shown below in the application\n                        config. In our apps config we return our CustomTraceContext letting us modify the logging\n                        behavior which can be seen when in the <code>newScope()</code> method\n                    </p>\n                    <h4><code>AppConfig.java</code></h4>\n                    <Java code={code3[\"impl2-config\"]}/>\n                    <h4><code>CustomTraceContext.java</code></h4>\n                    <Java code={code3.impl2}/>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Blog;\n","import React, {Component} from 'react';\n\nclass About extends Component {\n    render() {\n        return (\n            <div>About</div>\n        );\n    }\n}\n\nexport default About;","import React, {Component} from 'react';\n\nclass Projects extends Component {\n    render() {\n        return (\n            <div>Projects</div>\n        );\n    }\n}\n\nexport default Projects;","import React, {Component} from 'react';\nimport TitleBar from \"./components/title-bar/title-bar\";\nimport Home from \"./components/pages/home/home\";\nimport Blog from \"./components/pages/blog/blog\";\nimport About from \"./components/pages/about/about\";\nimport Projects from \"./components/pages/projects/projects\";\nimport {Route, Switch} from 'react-router-dom'\nimport './css/App.scss'\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <TitleBar/>\n                <Switch>\n                    <Route exact path=\"/\" component={Home}/>\n                    <Route path=\"/blog\" component={Blog}/>\n                    <Route path=\"/project\" component={Projects}/>\n                    <Route path=\"/about\" component={About}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from './App';\n\nimport './css/index.scss';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>), document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}