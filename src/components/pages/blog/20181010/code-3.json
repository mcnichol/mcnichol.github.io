{
  "test": "@Test\npublic void logsSpanWithCustomPrefix() {\n\tPrintStream sysOut = System.out;\n\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tPrintStream testOut = new PrintStream(baos);\n\tSystem.setOut(testOut);\n\n\ttestRestTemplate.getForEntity(\"/hello\", String.class);\n\n\tassertThat(baos.toString(), containsString(\"Logging message\"));\n\tassertThat(baos.toString(), containsString(\"CUSTOM_PATTERN_\"));\n\n\tSystem.setOut(sysOut);\n}",
  "impl1": "logging:\n\tpattern:\n\t\tlevel: \"${spring.zipkin.service.name:${spring.application.name:-}},CUSTOM_PATTERN_%X{X-B3-TraceId:-},CUSTOM_PATTERN_%X{X-B3-SpanId:-},%X{X-Span-Export:-}\"",
  "impl2": "public class CustomTraceContext extends CurrentTraceContext {\n\t// Backward compatibility for all logging patterns\n\tprivate static final String LEGACY_EXPORTABLE_NAME = \"X-Span-Export\";\n\tprivate static final String LEGACY_PARENT_ID_NAME = \"X-B3-ParentSpanId\";\n\tprivate static final String LEGACY_TRACE_ID_NAME = \"X-B3-TraceId\";\n\tprivate static final String LEGACY_SPAN_ID_NAME = \"X-B3-SpanId\";\n\n\tprivate static final Logger log = LoggerFactory\n\t\t\t.getLogger(CustomTraceContext.class);\n\n\tpublic static CustomTraceContext create() {\n\t\treturn create(CurrentTraceContext.Default.inheritable());\n\t}\n\n\tpublic static CustomTraceContext create(CurrentTraceContext delegate) {\n\t\treturn new CustomTraceContext(delegate);\n\t}\n\n\tfinal CurrentTraceContext delegate;\n\n\tCustomTraceContext(CurrentTraceContext delegate) {\n\t\tif (delegate == null)\n\t\t\tthrow new NullPointerException(\"delegate == null\");\n\t\tthis.delegate = delegate;\n\t}\n\n\t@Override\n\tpublic TraceContext get() {\n\t\treturn this.delegate.get();\n\t}\n\n\t@Override\n\tpublic Scope newScope(@Nullable TraceContext currentSpan) {\n\t\tfinal String previousTraceId = MDC.get(\"traceId\");\n\t\tfinal String previousParentId = MDC.get(\"parentId\");\n\t\tfinal String previousSpanId = MDC.get(\"spanId\");\n\t\tfinal String spanExportable = MDC.get(\"spanExportable\");\n\t\tfinal String legacyPreviousTraceId = MDC.get(LEGACY_TRACE_ID_NAME);\n\t\tfinal String legacyPreviousParentId = MDC.get(LEGACY_PARENT_ID_NAME);\n\t\tfinal String legacyPreviousSpanId = MDC.get(LEGACY_SPAN_ID_NAME);\n\t\tfinal String legacySpanExportable = MDC.get(LEGACY_EXPORTABLE_NAME);\n\n\t\tif (currentSpan != null) {\n\t\t\tString traceIdString = \"CUSTOM_PATTERN_\" + currentSpan.traceIdString();\n\t\t\tMDC.put(\"traceId\", traceIdString);\n\t\t\tMDC.put(LEGACY_TRACE_ID_NAME, traceIdString);\n\t\t\tString parentId = currentSpan.parentId() != null ?\n\t\t\t\t\tHexCodec.toLowerHex(currentSpan.parentId()) :\n\t\t\t\t\tnull;\n\t\t\treplace(\"parentId\", parentId);\n\t\t\treplace(LEGACY_PARENT_ID_NAME, parentId);\n\t\t\tString spanId = HexCodec.toLowerHex(currentSpan.spanId());\n\t\t\tspanId = \"CUSTOM_PATTERN_\" + spanId;\n\t\t\tMDC.put(\"spanId\", spanId);\n\t\t\tMDC.put(LEGACY_SPAN_ID_NAME, spanId);\n\t\t\tString sampled = String.valueOf(currentSpan.sampled());\n\t\t\tMDC.put(\"spanExportable\", sampled);\n\t\t\tMDC.put(LEGACY_EXPORTABLE_NAME, sampled);\n\t\t\tlog(\"Starting scope for span: {}\", currentSpan);\n\t\t\tif (currentSpan.parentId() != null) {\n\t\t\t\tif (log.isTraceEnabled()) {\n\t\t\t\t\tlog.trace(\"With parent: {}\", currentSpan.parentId());\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tMDC.remove(\"traceId\");\n\t\t\tMDC.remove(\"parentId\");\n\t\t\tMDC.remove(\"spanId\");\n\t\t\tMDC.remove(\"spanExportable\");\n\t\t\tMDC.remove(LEGACY_TRACE_ID_NAME);\n\t\t\tMDC.remove(LEGACY_PARENT_ID_NAME);\n\t\t\tMDC.remove(LEGACY_SPAN_ID_NAME);\n\t\t\tMDC.remove(LEGACY_EXPORTABLE_NAME);\n\t\t}\n\n\t\tScope scope = this.delegate.newScope(currentSpan);\n\n\t\tclass ThreadContextCurrentTraceContextScope implements Scope {\n\t\t\t@Override\n\t\t\tpublic void close() {\n\t\t\t\tlog(\"Closing scope for span: {}\", currentSpan);\n\t\t\t\tscope.close();\n\t\t\t\treplace(\"traceId\", previousTraceId);\n\t\t\t\treplace(\"parentId\", previousParentId);\n\t\t\t\treplace(\"spanId\", previousSpanId);\n\t\t\t\treplace(\"spanExportable\", spanExportable);\n\t\t\t\treplace(LEGACY_TRACE_ID_NAME, legacyPreviousTraceId);\n\t\t\t\treplace(LEGACY_PARENT_ID_NAME, legacyPreviousParentId);\n\t\t\t\treplace(LEGACY_SPAN_ID_NAME, legacyPreviousSpanId);\n\t\t\t\treplace(LEGACY_EXPORTABLE_NAME, legacySpanExportable);\n\t\t\t}\n\t\t}\n\t\treturn new ThreadContextCurrentTraceContextScope();\n\t}\n\n\tprivate void log(String text, TraceContext span) {\n\t\tif (span == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (log.isTraceEnabled()) {\n\t\t\tlog.trace(text, span);\n\t\t}\n\t}\n\n\tstatic void replace(String key, @Nullable String value) {\n\t\tif (value != null) {\n\t\t\tMDC.put(key, value);\n\t\t} else {\n\t\t\tMDC.remove(key);\n\t\t}\n\t}\n}",
  "impl2-config": "@Configuration\npublic class AppConfig {\n\t@Bean\n\t@Primary\n\tpublic CurrentTraceContext slf4jSpanLogger() {\n\t\treturn CustomTraceContext.create();\n\t}\n}"
}